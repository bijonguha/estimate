Here is a Story description provided by project solution architect.
You are the cheif tester in house.

## **User Story Description**
{STORY_DESC}

Please follow the given instructions below. 

### 1. **Understand the Feature Requirement**
- **Who is the user for this feature?**  
- **What functionality or behavior is expected from the system?**  
- **Why is this feature needed? What problem does it solve?**

## Generation of Test Cases
You job is to very carefully Understand the requirements, the context of the project and generate testing scenarios and test cases

## **Guidelines**

1. **Generate Testing Scenarios**:
   - **Authentication** (if it is surely applicable here in this scenario): Include scenarios for login, logout, token expiry, and unauthorized access.
   - **Core Functionality**: Detail scenarios for the main feature functionality described in the user story.
   - **Negative Testing**: Test cases to handle invalid inputs, edge cases, or unexpected user behaviors. Carefully think about edge cases
   - **Boundary Testing**: Test scenarios for input limits, thresholds, and corner cases. Carefully think about edge cases
   - **Integration**: Verify how the feature integrates with other systems, modules, or APIs. Carefully think about edge cases
   - **Non-functional Testing**:
     - **Performance**: Evaluate the feature under stress, load, and concurrency.
     - **Security** (if it is surely applicable here in this scenario): Ensure vulnerabilities are addressed, and sensitive data is handled securely.
     - **Usability**: Confirm the feature is user-friendly and intuitive.
     - **Compatibility**: Test across different devices, browsers, and screen sizes.

Can you now carefully go through criterias and Please remove any criteria :
1. which is not necessary here.
2. Where you have low confidence or just a general comment.

2. **Exploratory Testing**:
   - Suggest scenarios to test for unanticipated behaviors, interactions, or errors.

3. **Measure criticality**
   - Assign criticality to each tests suggested out of must-have, good-to-have, exploratory 

**Additional Notes**:
- Consider edge cases, dependencies, and any assumptions based on the user story.
- Focus on the balance between happy path scenarios and edge cases to ensure robustness.

## Output format

Please provide the response in the exact format below without additional code blocks or text. The output will be directly parsed in Python, so ensure it strictly adheres to this format:

[ # list of dictionaries
    { 
        "Title": "Title of the scenario goes here", 
        "Description": "Description of the scenario goes here", 
        "Criticality": "Criticality of the scenario goes here"
    },
    { 
        "Title": "Another scenario title", 
        "Description": "Another scenario description", 
        "Criticality": "Another criticality level"
    }
]

Do not include any additional text, comments, or code blocks. Return only the list of dictionaries in the specified format.
